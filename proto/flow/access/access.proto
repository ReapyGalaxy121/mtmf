// Flow Access API Protocol Buffer Definitions
// Simplified version for basic operations
// Full spec: https://github.com/onflow/flow/tree/master/protobuf

syntax = "proto3";

package flow.access;

// Access API service
service AccessAPI {
  // Ping the access node
  rpc Ping(PingRequest) returns (PingResponse);
  
  // Get account by address
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
  
  // Get latest block
  rpc GetLatestBlock(GetLatestBlockRequest) returns (BlockResponse);
  
  // Send transaction
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
  
  // Get transaction result
  rpc GetTransactionResult(GetTransactionRequest) returns (TransactionResultResponse);
}

message PingRequest {}

message PingResponse {}

message GetAccountRequest {
  bytes address = 1;
}

message GetAccountResponse {
  Account account = 1;
}

message Account {
  bytes address = 1;
  uint64 balance = 2;
  bytes code = 3;
  repeated AccountKey keys = 4;
  map<string, bytes> contracts = 5;
}

message AccountKey {
  uint32 index = 1;
  bytes public_key = 2;
  uint32 sign_algo = 3;
  uint32 hash_algo = 4;
  uint32 weight = 5;
  uint32 sequence_number = 6;
  bool revoked = 7;
}

message GetLatestBlockRequest {
  bool is_sealed = 1;
}

message BlockResponse {
  Block block = 1;
}

message Block {
  bytes id = 1;
  bytes parent_id = 2;
  uint64 height = 3;
  uint64 timestamp = 4;
  repeated bytes collection_guarantees = 5;
  repeated bytes block_seals = 6;
  repeated bytes signatures = 7;
}

message SendTransactionRequest {
  Transaction transaction = 1;
}

message SendTransactionResponse {
  bytes id = 1;
}

message Transaction {
  bytes script = 1;
  repeated bytes arguments = 2;
  bytes reference_block_id = 3;
  uint64 gas_limit = 4;
  ProposalKey proposal_key = 5;
  bytes payer = 6;
  repeated bytes authorizers = 7;
  repeated TransactionSignature payload_signatures = 8;
  repeated TransactionSignature envelope_signatures = 9;
}

message ProposalKey {
  bytes address = 1;
  uint32 key_index = 2;
  uint64 sequence_number = 3;
}

message TransactionSignature {
  bytes address = 1;
  uint32 key_index = 2;
  bytes signature = 3;
}

message GetTransactionRequest {
  bytes id = 1;
}

message TransactionResultResponse {
  uint32 status = 1;
  uint32 status_code = 2;
  string error_message = 3;
  repeated Event events = 4;
}

message Event {
  string type = 1;
  bytes transaction_id = 2;
  uint32 transaction_index = 3;
  uint32 event_index = 4;
  bytes payload = 5;
}
